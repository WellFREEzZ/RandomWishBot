import asyncio
import logging
import re
import random as r

from geopy import geocoders
from geopy.extra.rate_limiter import RateLimiter
from timezonefinder import TimezoneFinder
import datetime as dt
import pytz

from settings import Config
from DB import SQLighter
import keyboards as kb

from telethon import TelegramClient, events, Button
from telethon.errors import MessageDeleteForbiddenError, MessageIdInvalidError, MessageNotModifiedError

logging.basicConfig(level=logging.INFO)

cur_cfg = Config()
db = SQLighter(cur_cfg.db_name, cur_cfg.sep)
bot = TelegramClient(cur_cfg.bot_session_name, cur_cfg.api_id, cur_cfg.api_hash)

geo = geocoders.Nominatim(user_agent="WellMot")
reverse = RateLimiter(geo.geocode, min_delay_seconds=1)
tz_find = TimezoneFinder()

SEP = cur_cfg.sep


async def utc_to_local(utc_now, tz_zone):
    tz = pytz.timezone('UTC' if tz_zone is None else tz_zone)
    return pytz.utc.localize(utc_now, is_dst=None).astimezone(tz)


async def send_status(user):
    text, rowid, need_rewrite = db.get_status(user)
    if user.seen_statuses and not need_rewrite:
        tmp = user.seen_statuses.split(SEP)
        tmp.append(rowid)
        user.seen_statuses = SEP.join(tmp)
    else:
        user.seen_statuses = rowid

    db.update_user(user)
    await bot.send_message(user.tg_id, text)
    return


async def send_special(user):
    text, rowid, need_rewrite = db.get_special(user)
    if user.seen_specials and not need_rewrite:
        tmp = user.seen_specials.split(SEP)
        tmp.append(rowid)
        user.seen_specials = SEP.join(tmp)
    else:
        user.seen_specials = rowid

    db.update_user(user)
    await bot.send_message(user.tg_id, text)
    return


async def main_menu(event, user, replace: bool = False, new: bool = False):
    if new:
        text = '–ü—Ä–∏–≤–µ—ÇüôÇ\n' \
               '–Ø - –±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –¥–ª—è –≤–∞–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∂–∏–∑–Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞.\n\n' \
               '–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏—è, ' \
               '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–¥–Ω–∏–º–∞—Ç—å —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∑–∞—Ä—è–∂–∞—Ç—å —Å–∏–ª–∞–º–∏ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å :)\n\n' \
               '–ï—Å–ª–∏ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–æ, –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ üé±.\n\n' \
               '–õ—é–±–ª—é —Ç–µ–±—è üß°'
        butt = await kb.make_markup(user, 'new')
    else:
        if user.setting_tz:
            await event.delete()
            try:
                await bot.edit_message(user.tg_id, user.active_msg_id,
                                       "–ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω—É–∂–Ω–æ —Å–≤–µ—Ä–∏—Ç—å —á–∞—Å—ã. "
                                       "–ù–µ –∂—É–ª—å–Ω–∏—á–∞–π :/\n\n"
                                       "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å)")
            except MessageNotModifiedError:
                await bot.edit_message(user.tg_id, user.active_msg_id,
                                       "–ï—Å–ª–∏ –ø–æ—à—É—Ç–∏—Ç—å –æ–¥–Ω—É —à—É—Ç–∫—É –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥, —Å–º–µ—à–Ω–µ–µ –Ω–µ —Å—Ç–∞–Ω–µ—Ç :/\n\n"
                                       "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å)")
            return

        text = '–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å)\n\n'
        butt = await kb.make_markup(user, 'main')

    user.setting_tz = 0
    user.adding_range = 0
    user.adding_time_range = 0
    user.adding_time_click = 0
    db.update_user(user)

    if replace:
        msg_sent = await bot.send_message(event.sender, text, buttons=butt,
                                          link_preview=False)
        await event.delete()
        try:
            await bot.delete_messages(event.sender, user.active_msg_id)
        except (MessageIdInvalidError, MessageDeleteForbiddenError):
            pass
        user.active_msg_id = msg_sent.id
        db.update_user(user)
        return

    await bot.edit_message(user.tg_id, await event.get_message(), text, buttons=butt,
                           link_preview=False)
    return


@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    user = db.get_user(event.sender.id)
    if not user:
        db.add_user(event.sender.id, event.sender.username, event.message.id)
        user = db.get_user(event.sender.id)
        await main_menu(event, user, True, True)
        return
    else:
        await main_menu(event, user, True)
        return


@bot.on(events.NewMessage(pattern='/admin'))
async def admin_start(event):
    return


@bot.on(events.NewMessage())
async def user_input(event):
    if event.message.text == '/start' or event.message.text == '/admin':
        return
    user = db.get_user(event.sender.id)
    if not user:
        await start(event)
        return

    if user.setting_tz:
        await event.delete()
        place, (lat, lng) = reverse(event.message.text)
        tz_zone = tz_find.timezone_at(lng=lng, lat=lat)
        tz = pytz.timezone(tz_zone)
        utc_now = dt.datetime.utcnow()
        local_now = pytz.utc.localize(utc_now, is_dst=None).astimezone(tz)
        text = f'–ò—Ç–∞–∫, —Å–µ–π—á–∞—Å —Ç—ã –≤ –º–µ—Å—Ç–µ—á–∫–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º `{place.partition(",")[0]}`\n' \
               f'–¢–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `{local_now.strftime("%H:%M")}`\n' \
               f'–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –≤ –º–µ–Ω—é "–í—Ä–µ–º—è".'
        butt = await kb.make_markup(user, 'confirm')
        user.setting_tz = 0
        user.timezone = tz_zone
        db.update_user(user)
        await bot.edit_message(user.tg_id, user.active_msg_id, text, buttons=butt)
        return
    if user.adding_time_range:
        period_sample = re.compile(r'^(2[0-3]|[0-1]?\d)\W([0-5]\d)\W(2[0-3]|[0-1]?\d)\W([0-5]\d)$')
        await event.delete()
        if period_sample.match(event.message.text):
            nums = re.split(r'\W', event.message.text)
            user.time_rand = f'{nums[0]}:{nums[1]}-{nums[2]}:{nums[3]}'
            user.adding_time_range = 0
            db.update_user(user)
            await bot.edit_message(user.tg_id, user.active_msg_id, "–£—Å–ø–µ—à–Ω–æ!",
                                   buttons=await kb.make_markup(user, 'add_period', 1))
            return
        else:
            try:
                await bot.edit_message(user.tg_id, user.active_msg_id, '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏. '
                                                                       '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è, '
                                                                       '—è –≤ —Ç–µ–±—è –≤–µ—Ä—é)')
            except MessageNotModifiedError:
                await bot.edit_message(user.tg_id, user.active_msg_id,
                                       '–°–µ—Ä—å—ë–∑–Ω–æ?)\n–ù–∞ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤–µ–¥—å —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ —Ç–∞–∫ –ª–∏?)')
            return
    if user.adding_range:
        range_sample = re.compile(r'^([0-4]?\d)\W([0-4]?\d)$')
        await event.delete()
        if range_sample.match(event.message.text):
            nums = re.split(r'\W', event.message.text)
            user.range_rand = f'{min(nums)}{SEP}{max(nums)}'
            user.adding_range = 0
            db.update_user(user)
            await bot.edit_message(user.tg_id, user.active_msg_id, "–£—Å–ø–µ—à–Ω–æ!",
                                   buttons=await kb.make_markup(user, 'add_count', 1))
            return
        else:
            try:
                await bot.edit_message(user.tg_id, user.active_msg_id, '–û–π! –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –¢–∞–º –æ—à–∏–±–æ—á–∫–∞ –±—ã–ª–∞...\n'
                                                                       '–ê —è —É–∂–µ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∞–∂–∞–ª, –∏ –≤—Å—ë —É–¥–∞–ª–∏–ª–æ—Å—å ü•≤\n'
                                                                       '–ü—Ä–∏–¥—ë—Ç—Å—è —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æü§∑‚Äç‚ôÇÔ∏è',
                                       buttons=await kb.make_markup(user, 'add_count'))
            except MessageNotModifiedError:
                await bot.edit_message(user.tg_id, user.active_msg_id,
                                       '–ê —è —Å–º–æ—Ç—Ä—é, —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ —Å–≤–æ—ë–º!\n'
                                       '–ú–æ–ª–æ–¥–µ—Ü)\n'
                                       '–ù–æ, —É –º–µ–Ω—è –µ—Å—Ç—å —á—ë—Ç–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∫–∞–∫ –Ω–µ –æ–±–æ–π—Ç–∏...\n'
                                       '–ü–æ–¥—á–∏–Ω–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ü•∫',
                                       buttons=await kb.make_markup(user, 'add_count'))
        return
    if user.adding_time_click:
        time_sample = re.compile(r'^(2[0-3]|[0-1]?\d)\W([0-5]\d)$')
        await event.delete()
        if time_sample.match(event.message.text):
            nums = re.split(r'\W', event.message.text)
            if user.time_click:
                tmp = user.time_click.split(SEP)
                tmp.append(f'{nums[0]}:{nums[1]}')
                user.time_click = SEP.join(tmp)
            else:
                user.time_click = f'{nums[0]}:{nums[1]}'
            user.adding_time_click = 0
            db.update_user(user)
            await bot.edit_message(user.tg_id, user.active_msg_id, "–£—Å–ø–µ—à–Ω–æ!",
                                   buttons=await kb.make_markup(user, 'add_click_time', 1))
            return

        else:
            try:
                await bot.edit_message(user.tg_id, user.active_msg_id, '–î–∞–≤–∞–π –ø–æ-–Ω–æ–≤–æ–π, –ú–∏—à–∞, –≤—Å—ë —Ö—É–π–Ω—è.',
                                       buttons=await kb.make_markup(user, 'add_click_time'))
            except MessageNotModifiedError:
                await bot.edit_message(user.tg_id, user.active_msg_id,
                                       '–¢–∏ —à–æ, —Ö–æ—Ö–æ–ª?',
                                       buttons=await kb.make_markup(user, 'add_click_time'))

    return


@bot.on(events.CallbackQuery())
async def query_process(event):
    user = db.get_user(event.query.peer.user_id)
    if not user:
        await start(event)
        return
    data = event.data.decode('UTF-8')
    menu, s, data = data.partition(SEP)
    command, s, data = data.partition(SEP)

    # Place for inline menu defs
    async def answer_menu(show_ans: bool = False):
        try:
            text_lol = '**8–π —à–∞—Ä**\n\n'
            if show_ans:
                text_lol += f'`{db.get_answer()}`\n\n'
            else:
                text_lol += '–î–µ—Ä–∂–∏ –≤ –≥–æ–ª–æ–≤–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å `–î–∞` –∏–ª–∏ `–ù–µ—Ç`, –∏ –Ω–∞–∂–º–∏ –Ω–∞ üé≤\n\n'

            text_lol += '–ü–æ–º–Ω–∏, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é. –≠—Ç–æ –ª–∏—à—å –ø—ë—Ä—ã—à–∫–æ, –ø–∞–¥–∞—é—â–µ–µ –Ω–∞ –≤–µ—Å—ã –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è!'
            await bot.edit_message(user.tg_id, user.active_msg_id, text_lol,
                                   buttons=await kb.make_markup(user, 'answer'))
            return
        except MessageNotModifiedError:
            await answer_menu(True)
            return

    async def timezone_menu():
        local_now = await utc_to_local(dt.datetime.utcnow(), user.timezone)
        text_lol = f'–í—Ä–µ–º—è —Å–µ–π—á–∞—Å: `{local_now.strftime("%H:%M")}`\n' \
                   f'–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user.timezone}'
        await bot.edit_message(user.tg_id, user.active_msg_id, text_lol,
                               buttons=await kb.make_markup(user, 'timezone'))

    async def sends_menu():
        text_lol = f'üçÄ **"–£–¥–∞—á–ª–∏–≤—ã–µ" —Ü–∏—Ç–∞—Ç–∫–∏:**\n\n'
        if user.range_rand and user.time_rand and user.lucky_sends_enabled:
            x, s_t, y = user.range_rand.partition(SEP)
            st, s_t, en = user.time_rand.partition('-')
            text_lol += f'–û—Ç `{x}` –¥–æ `{y}` —Ä–∞–∑ —Å `{st}` –ø–æ `{en}`.\n\n'
        else:
            text_lol += '–û—Ç–∫–ª—é—á–µ–Ω—ã.\n\n'

        text_lol += 'üéØ **"–¢–æ—á–Ω—ã–µ" —Ü–∏—Ç–∞—Ç–∫–∏:**\n\n'
        if user.time_click:
            text_lol += "\n".join(user.time_click.split(SEP)) + '\n\n'
        else:
            text_lol += '–û—Ç–∫–ª—é—á–µ–Ω—ã.\n\n'

        await bot.edit_message(user.tg_id, user.active_msg_id, text_lol, buttons=await kb.make_markup(user, 'sends'))
        return

    async def lucky_sends():
        text_lol = f'üçÄ **"–£–¥–∞—á–ª–∏–≤—ã–µ" —Ü–∏—Ç–∞—Ç–∫–∏:**\n\n'
        text_lol += '–°—Ç–∞—Ç—É—Å: ' + ('–í–∫–ª—é—á–µ–Ω—ã' if user.lucky_sends_enabled else '–í—ã–∫–ª—é—á–µ–Ω—ã') + '\n'
        text_lol += '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: '
        if user.range_rand:
            x, s_t, y = user.range_rand.partition(SEP)
            text_lol += f'–æ—Ç {x} –¥–æ {y}\n'
        else:
            text_lol += '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n'
        text_lol += '–ü–µ—Ä–∏–æ–¥: '
        if user.time_rand:
            st, s_t, en = user.time_rand.partition('-')
            text_lol += f'—Å {st} –ø–æ {en}\n'
        else:
            text_lol += '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n'

        await bot.edit_message(user.tg_id, user.active_msg_id, text_lol,
                               buttons=await kb.make_markup(user, 'lucky_sends'))
        return

    async def click_sends():
        text_lol = 'üéØ **"–¢–æ—á–Ω—ã–µ" —Ü–∏—Ç–∞—Ç–∫–∏:**\n\n'
        if user.time_click:
            text_lol += "\n".join(user.time_click.split(SEP)) + '\n\n'
        else:
            text_lol += '–û—Ç–∫–ª—é—á–µ–Ω—ã.\n\n'
        await bot.edit_message(user.tg_id, user.active_msg_id, text_lol,
                               buttons=await kb.make_markup(user, 'click_sends'))
        return

    """PRIORITY BUTTONS"""
    if command == 'cancel':
        if menu == 'add_period':
            user.adding_time_range = 0
            db.update_user(user)
            await lucky_sends()
            return
        if menu == 'add_count':
            user.adding_range = 0
            db.update_user(user)
            await lucky_sends()
            return
        if menu == 'add_click_time':
            user.adding_time_click = 0
            db.update_user(user)
            await click_sends()
            return
        return
    if command == 'back':
        if menu == 'answer' or menu == 'timezone' or menu == 'sends':
            await main_menu(event, user)
            return
        if menu == 'lucky_sends' or menu == 'click_sends':
            await sends_menu()
            return
        return
    if command == 'main':
        return
    if command == 'ok':
        if menu == 'confirm':
            await main_menu(event, user)
            return
        if menu == 'add_period' or menu == 'add_count':
            await lucky_sends()
            return
        if menu == 'add_click_time':
            await click_sends()
            return
        return

    "MENU LOGIC"
    if menu == 'new':
        if command == 'set_tz':
            await bot.edit_message(user.tg_id, user.active_msg_id, '–û–∫–µ–π.\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞)')
            user.setting_tz = True
            db.update_user(user)
            return
        return

    if menu == 'main':
        if command == 'tz':
            await timezone_menu()
            return
        if command == 'set_sends':
            await sends_menu()
            return
        if command == 'answer':
            await answer_menu()
            return
        if command == 'get_status':
            await send_status(user)
            return
        return

    if menu == 'answer':
        if command == 'get':
            await answer_menu(True)
            return
        return

    if menu == 'timezone':
        if command == 'set':
            user.setting_tz = 1
            db.update_user(user)
            await bot.edit_message(user.tg_id, user.active_msg_id, "–û–∫–µ–π. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å :)")
            return
        return

    if menu == 'sends':
        if command == 'lucky_sends':
            await lucky_sends()
            return
        if command == 'click_sends':
            await click_sends()
            return

    if menu == 'lucky_sends':
        if command == 'set_period':
            await bot.edit_message(user.tg_id, user.active_msg_id,
                                   "–Ø —É–º–Ω—ã–π)\n"
                                   "–ú–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞\n"
                                   "(–æ—Ç 0 –¥–æ 12 —á–∞—Å–æ–≤ –∏ –æ—Ç 0 –¥–æ 59 –º–∏–Ω—É—Ç)\n"
                                   "–ò –≤—Ä–µ–º–µ–Ω–µ–º –∫–æ–Ω—Ü–∞ (—Ç–∞–∫–∞—è –∂–µ —à—Ç—É–∫–∞)\n"
                                   "–ê —á—Ç–æ –±—É–¥–µ—Ç –º–µ–∂–¥—É –Ω–∏–º–∏ –∏ –º–µ–∂–¥—É —á–∞—Å–∞–º–∏ –∏ –º–∏–Ω—É—Ç–∞–º–∏ - –∫–∞–∫ —É–¥–æ–±–Ω–æ —Ç–µ–±–µ, "
                                   "—è –ø–æ–π–º—É, –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ —Ü–∏—Ñ—Ä–∞ –∏ –Ω–µ –±—É–∫–≤–∞)",
                                   buttons=await kb.make_markup(user, 'add_period'))
            user.adding_time_range = 1
            db.update_user(user)
            return
        if command == 'set_count':
            text = '–†—É–∫–∏ –≤–≤–µ—Ä—Ö!\n' \
                   '–ú–Ω–µ –Ω—É–∂–Ω—ã —Ü–∏—Ñ—Ä—ã. –¢–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ ' \
                   '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–µ–Ω—è –≤ –¥–µ–Ω—å.\n\n' \
                   '–ù–æ –µ—Å—Ç—å –ø–æ–¥–≤–æ—Ö, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ - –Ω–µ –±–æ–ª—å—à–µ 49.\n' \
                   '–ü–æ—Å–ª–µ–¥–Ω–µ–µ, —á—Ç–æ —è —Ö–æ—á—É - —ç—Ç–æ —Å–∏–¥–µ—Ç—å –≤ —Ç—é—Ä—è—á–∫–µ –¥–ª—è –±–æ—Ç–æ–≤ –∑–∞ —Å–ø–∞–º...\n' \
                   '–ó–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—é—Ç –≤ —Ç—é—Ä—è—á—å–∫–µ? - –î–æ–ª–±—è—Ç –≤ –∑–∞–¥–Ω–∏—Ü—É. ' \
                   '–ê —É –º–µ–Ω—è –∏ —Ç–∞–∫ —É–∂–µ —Å–æ–∫–µ—Ç —Ä–∞—Å—à–∞—Ç–∞–Ω...'
            user.adding_range = 1
            db.update_user(user)
            await bot.edit_message(user.tg_id, user.active_msg_id, text,
                                   buttons=await kb.make_markup(user, 'add_count'))
            return
        if command == 'enable':
            user.lucky_sends_enabled = 1
            db.update_user(user)
            await lucky_sends()
            return
        if command == 'disable':
            user.lucky_sends_enabled = 0
            db.update_user(user)
            await lucky_sends()
            return

    if menu == 'click_sends':
        if command == 'remove':
            tmp = user.time_click.split(SEP)
            tmp.remove(data)
            user.time_click = SEP.join(tmp)
            db.update_user(user)
            await click_sends()
            return
        if command == 'add':
            await bot.edit_message(user.tg_id, user.active_msg_id,
                                   '–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n'
                                   '–ß–∞—Å—ã (0-23) –º–∏–Ω—É—Ç—ã (00-59)\n'
                                   '–ò –º–µ–∂–¥—É –Ω–∏–º–∏ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª,'
                                   '–Ω–æ –Ω–µ —Ü–∏—Ñ—Ä–∞ –∏ –Ω–µ –±—É–∫–≤–∞.\n'
                                   '–ß—Ç–æ-—Ç–æ —Ç–∏–ø–∞ `10=00`\n'
                                   '–í–æ—Ç —Ç–µ–±–µ –∏ –∑–∞–¥–∞—á–∫–∞ –ø–æ–¥–∫–∞—Ç–∏–ª–∞...',
                                   buttons=await kb.make_markup(user, 'add_click_time'))
            user.adding_time_click = 1
            db.update_user(user)
            return

        return


async def click_statuses(us):
    now = dt.datetime.utcnow()
    for u in us:
        if not u.timezone or not u.time_click:
            continue
        tz = u.timezone
        local_now = (await utc_to_local(now, tz)).strftime("%H:%M")
        times = u.time_click.split(SEP)
        for t in times:
            if local_now == t:
                await send_status(u)


async def lucky_statuses(us):
    now = dt.datetime.utcnow()
    for u in us:
        if not u.timezone or not u.time_rand or not u.range_rand or not u.lucky_sends_enabled:
            continue
        tz = u.timezone
        local_now = (await utc_to_local(now, tz)).replace(second=0, microsecond=0)
        st, s_, en = u.time_rand.partition('-')
        st = local_now.replace(hour=int(st.partition(':')[0]), minute=int(st.partition(':')[2]))
        en = local_now.replace(hour=int(en.partition(':')[0]), minute=int(en.partition(':')[2]))
        if local_now > st >= en:
            en += dt.timedelta(days=1)
        if st >= en > local_now:
            st -= dt.timedelta(days=1)

        if local_now == st:
            u.lucky_sends_sent = 0
            u.cur_lucky_sends_count = r.randrange(int(u.range_rand.partition(SEP)[0]),
                                                  int(u.range_rand.partition(SEP)[2]) + 1, 1)
            minutes = ((en - st).seconds // 60) % 60
            u.period = u.cur_lucky_sends_count // minutes
            u.cur_luck = 0
            u.next_max_luck = (st + dt.timedelta(minutes=u.period)).strftime('%H:%M')
            db.update_user(u)
            continue

        if en >= local_now > st:
            if u.cur_lucky_sends_count is None:
                u.cur_lucky_sends_count = 10
                minutes = ((en - st).seconds // 60) % 60
                u.period = u.cur_lucky_sends_count // minutes
                u.cur_luck = 0
                u.next_max_luck = (st + dt.timedelta(minutes=u.period)).strftime('%H:%M')
                db.update_user(u)
            if u.lucky_sends_sent is None:
                u.lucky_sends_sent = 0
                db.update_user(u)

            if u.lucky_sends_sent >= u.cur_lucky_sends_count:
                continue

            next_max_luck = local_now.replace(hour=int(u.next_max_luck.partition(':')[0]),
                                              minute=int(u.next_max_luck.partition(':')[2]))

            luck_step = 100 // u.period

            if next_max_luck > local_now:
                u.cur_luck = 100 - ((next_max_luck - local_now).seconds // 60) % 60 * luck_step
            elif next_max_luck == local_now:
                u.cur_luck = 100
            else:
                u.next_max_luck = (local_now + dt.timedelta(minutes=u.period)).strftime('%H:%M')
                u.cur_luck = 0
                db.update_user(u)

            if r.choices([True, False],  weights=[u.cur_luck, 100 - u.cur_luck])[0]:
                if u.is_she and r.choices([True, False], weights=[10, 30])[0]:
                    await send_special(u)
                else:
                    await send_status(u)
                u.lucky_sends_sent += 1
                u.next_max_luck = (next_max_luck + dt.timedelta(minutes=u.period)).strftime('%H:%M')
                u.cur_luck = 0
                db.update_user(u)


async def send_activity():
    while True:
        await asyncio.sleep(60)
        users = db.get_all_users()
        await asyncio.gather(click_statuses(users),
                             lucky_statuses(users))


if __name__ == "__main__":
    bot.start(bot_token=cur_cfg.bot_token)
    bot.loop.create_task(send_activity())
    bot.loop.run_forever()
